/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    scanner s;
    Parser(scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
init with {: s.init(); :};
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            EXPRESSION_END SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE PARENTHESES_OPEN PARENTHESES_CLOSE CURLY_BRACKET_OPEN CURLY_BRACKET_CLOSE
terminal            ADDITION SUBTRACTION MULTIPLICATION DIVISION GREATER_THAN LESSER_THAN
terminal            EQ EQEQ AND OR XOR NOT
terminal            INTEGER_KEYWORD, BOOLEAN_KEYWORD, CHARACTER_KEYWORD, FLOAT_KEYWORD;
terminal            IF ELSE WHILE FOR PRINT SCAN
terminal            BOOLEAN IDENTIFIER INTEGER;

/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

/* The grammar rules */
<especificador_tipo> ::= "int" | "integer"
           | "float" 
           | "char" 
           | "bool" | "boolean"

<declaracao> ::= <especificador_tipo> <identificador> 
    	         | <especificador_tipo> <identificador> "[" <inteiro> "]"

<identificador>  ::= <letra> <caractere>*

<expressao> ::= <expressao_atribuicao> 
		  | <expressao> "," <expressao_atribuicao> 

<expressao_atribuicao> ::= <expressao_condicional> | <identificador> <operador_atribuicao> <expressao_atribuicao>

/*constantes*/

<constante> ::= <caractere> | <inteiro> | <numero_real>
<letra> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
<digito> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<caractere> ::= <letra> | <digito>
<inteiro> ::= <digito> | <inteiro> <digito>
<numero_real> ::=  <inteiro> "."  <inteiro> | "." <inteiro>

/*Operadores*/

<operador_atribuicao> ::= "=" | "+=" | "-=" | "*=" | "/="

/* express√µes */
	
<expressao_condicional> ::= <expressao_or> 

<expressao_or> ::= <expressao_and>
				 | <expressao_or> "||" <expressao_and>

<expressao_and> ::= <expressao_xor>
			      | <expressao_and> "&&" <expressao_xor>

<expressao_xor> ::= <expressao_equalidade>
				  | <expressao_xor> "^" <expressao_equalidade>

<expressao_equalidade> ::= <expressao_relacional>
                        | <expressao_equalidade> "==" <expressao_relacional>
                        | <expressao_equalidade> "!=" <expressao_relacional>

<expressao_relacional> ::= <expressao_aditiva>
                          | <expressao_relacional> "<" <expressao_aditiva>
                          | <expressao_relacional> ">" <expressao_aditiva>
                          | <expressao_relacional> "<=" <expressao_aditiva>
                          | <expressao_relacional> ">=" <expressao_aditiva>

<expressao_aditiva> ::= <expressao_multiplicativa>
                        | <expressao_aditiva> "+" <expressao_multiplicativa>
                        | <expressao_aditiva> "-" <expressao_multiplicativa>

<expressao_multiplicativa> ::= <expressao_primaria>
                              | <expressao_multiplicativa> "*" <expressao_primaria>
                              | <expressao_multiplicativa> "/" <expressao_primaria>

<expressao_primaria> ::= <identificador>
                       | <constante>
                       
<instrucao_composta> ::= <declaracao>* <instrucao>*

<instrucao> ::= <instrucao_composta>
              | <instrucao_if>
              | <instrucao_iterativa>
              | <instrucao_pulo>
		  | <comando>


<instrucao_if> ::= "if" "(" <expressao_condicional> ")" <instrucao>

<instrucao_iterativa> ::= "while" "(" <expressao_condicional> ")" <instrucao>
| "for" "(" <expressao_atribuicao> ";" <expressao_condicional>? ";"  <expressao> ")" <instrucao>


<comando> ::= <comando_print> | <comando_scan>

<comando_print> ::= "print" "(" <caractere>* ")" ";" 
			      | "print" "(" <identificador> ")" ";" 

<comando_scan> ::= "scan" "(" <identificador> ")" ";"

<instrucao_pulo> ::= "continue" ";"
                   | "break" ";"
                   | "return" <expressao> ";"

