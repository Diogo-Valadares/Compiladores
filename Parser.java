
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\002\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\005\000\002\005\003\000\002\005\005\000\002" +
    "\006\004\000\002\006\005\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\003" +
    "\000\002\012\003\000\002\012\005\000\002\013\003\000" +
    "\002\013\005\000\002\014\003\000\002\014\005\000\002" +
    "\015\003\000\002\015\005\000\002\015\006\000\002\016" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\006" +
    "\000\002\016\006\000\002\017\003\000\002\017\005\000" +
    "\002\017\005\000\002\020\003\000\002\020\005\000\002" +
    "\020\005\000\002\011\003\000\002\011\003\000\002\026" +
    "\005\000\002\022\002\000\002\022\004\000\002\022\004" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\023\007\000\002" +
    "\023\011\000\002\024\007\000\002\024\013\000\002\024" +
    "\012\000\002\024\012\000\002\024\011\000\002\025\004" +
    "\000\002\025\004\000\002\025\005\000\002\027\003\000" +
    "\002\027\003\000\002\030\007\000\002\030\007\000\002" +
    "\031\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\050\002\ufffd\010\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\001\002\000\050\002\026\010\037\026\045" +
    "\027\014\030\015\031\040\032\024\034\041\035\021\036" +
    "\053\037\023\040\043\041\027\042\016\043\010\045\055" +
    "\046\017\047\034\050\031\001\002\000\034\005\uffdd\007" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\001\002\000" +
    "\050\002\uffff\010\uffff\026\uffff\027\uffff\030\uffff\031\uffff" +
    "\032\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041" +
    "\uffff\042\uffff\043\uffff\045\uffff\046\uffff\047\uffff\050\uffff" +
    "\001\002\000\052\002\uffd2\010\uffd2\011\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\001\002\000\034\005\ufff3\007\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\001\002\000\034" +
    "\005\uffe0\007\uffe0\012\uffe0\013\uffe0\014\111\015\112\016" +
    "\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\001\002\000\052\002\uffd1\010\uffd1\011\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\001\002\000\020\005\uffea\007\uffea" +
    "\021\077\022\uffea\023\uffea\024\uffea\025\076\001\002\000" +
    "\004\045\ufff9\001\002\000\004\045\ufffa\001\002\000\034" +
    "\005\ufff2\007\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\001\002\000\004\005\177\001\002\000\050\002\000\010" +
    "\000\026\000\027\000\030\000\031\000\032\000\034\000" +
    "\035\000\036\000\037\000\040\000\041\000\042\000\043" +
    "\000\045\000\046\000\047\000\050\000\001\002\000\004" +
    "\006\157\001\002\000\024\005\uffe8\007\uffe8\016\102\017" +
    "\101\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\001\002" +
    "\000\004\006\153\001\002\000\004\006\145\001\002\000" +
    "\004\045\143\001\002\000\004\002\001\001\002\000\034" +
    "\005\ufff0\007\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\001\002\000\030\005\uffe5\007\uffe5\012\107\013\106\016" +
    "\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\001\002\000\014\040\043\041\027\042\016\043\010\045" +
    "\055\001\002\000\050\002\ufffe\010\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\050\ufffe\001\002\000\060\002\ufff7\004\ufff7\005" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\050\ufff7\001\002\000\004\005\140\001\002\000\004\005" +
    "\137\001\002\000\014\005\uffec\007\uffec\022\uffec\023\uffec" +
    "\024\074\001\002\000\046\011\uffd7\026\045\027\014\030" +
    "\015\031\040\032\024\034\041\035\021\036\053\037\023" +
    "\040\043\041\027\042\016\043\010\045\055\046\017\047" +
    "\034\050\031\001\002\000\004\045\ufffb\001\002\000\004" +
    "\006\125\001\002\000\010\005\uffef\007\uffef\023\123\001" +
    "\002\000\034\005\ufff1\007\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\001\002\000\052\002\uffc5\010\uffc5\011\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\001\002\000\004\045" +
    "\ufffc\001\002\000\012\005\uffee\007\uffee\022\071\023\uffee" +
    "\001\002\000\052\002\uffc4\010\uffc4\011\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\001\002\000\034\005\uffd9\007\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\001\002\000\052" +
    "\002\uffd3\010\uffd3\011\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\001\002\000\054\002\uffd4\004\067\010\uffd4\011\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\001\002\000\004\006" +
    "\060\001\002\000\052\002\uffd0\010\uffd0\011\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\001\002\000\034\005\uffda\012" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\056" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\001\002\000" +
    "\014\040\043\041\027\042\016\043\010\045\055\001\002" +
    "\000\060\002\ufff4\004\ufff4\005\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\001\002\000\006" +
    "\044\061\045\062\001\002\000\004\007\065\001\002\000" +
    "\004\007\063\001\002\000\004\005\064\001\002\000\052" +
    "\002\uffc3\010\uffc3\011\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\001\002\000\004\005\066\001\002\000\052\002\uffc2" +
    "\010\uffc2\011\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\001" +
    "\002\000\014\040\043\041\027\042\016\043\010\045\055" +
    "\001\002\000\060\002\ufff6\004\ufff6\005\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\001\002" +
    "\000\014\040\043\041\027\042\016\043\010\045\073\001" +
    "\002\000\014\005\uffeb\007\uffeb\022\uffeb\023\uffeb\024\074" +
    "\001\002\000\034\005\uffda\007\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\001\002\000\014\040\043\041\027\042" +
    "\016\043\010\045\073\001\002\000\020\005\uffe9\007\uffe9" +
    "\021\077\022\uffe9\023\uffe9\024\uffe9\025\076\001\002\000" +
    "\004\020\121\001\002\000\014\040\043\041\027\042\016" +
    "\043\010\045\073\001\002\000\024\005\uffe7\007\uffe7\016" +
    "\102\017\101\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\001\002\000\016\020\117\040\043\041\027\042\016\043" +
    "\010\045\073\001\002\000\016\020\104\040\043\041\027" +
    "\042\016\043\010\045\073\001\002\000\030\005\uffe3\007" +
    "\uffe3\012\107\013\106\016\uffe3\017\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\001\002\000\014\040\043\041" +
    "\027\042\016\043\010\045\073\001\002\000\030\005\uffe1" +
    "\007\uffe1\012\107\013\106\016\uffe1\017\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\001\002\000\014\040\043" +
    "\041\027\042\016\043\010\045\073\001\002\000\014\040" +
    "\043\041\027\042\016\043\010\045\073\001\002\000\034" +
    "\005\uffdf\007\uffdf\012\uffdf\013\uffdf\014\111\015\112\016" +
    "\uffdf\017\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\001\002\000\014\040\043\041\027\042\016\043\010\045" +
    "\073\001\002\000\014\040\043\041\027\042\016\043\010" +
    "\045\073\001\002\000\034\005\uffdb\007\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\001\002\000\034\005\uffdc\007" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\001\002\000" +
    "\034\005\uffde\007\uffde\012\uffde\013\uffde\014\111\015\112" +
    "\016\uffde\017\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\001\002\000\030\005\uffe4\007\uffe4\012\107\013\106" +
    "\016\uffe4\017\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\001\002\000\014\040\043\041\027\042\016\043\010" +
    "\045\073\001\002\000\030\005\uffe2\007\uffe2\012\107\013" +
    "\106\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\001\002\000\014\040\043\041\027\042\016\043" +
    "\010\045\073\001\002\000\024\005\uffe6\007\uffe6\016\102" +
    "\017\101\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\001" +
    "\002\000\014\040\043\041\027\042\016\043\010\045\073" +
    "\001\002\000\012\005\uffed\007\uffed\022\071\023\uffed\001" +
    "\002\000\014\040\043\041\027\042\016\043\010\045\073" +
    "\001\002\000\004\007\127\001\002\000\004\010\037\001" +
    "\002\000\052\002\uffcd\010\uffcd\011\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\001\002\000\046\011\uffd7\026\045\027" +
    "\014\030\015\031\040\032\024\034\041\035\021\036\053" +
    "\037\023\040\043\041\027\042\016\043\010\045\055\046" +
    "\017\047\034\050\031\001\002\000\004\011\135\001\002" +
    "\000\046\011\uffd7\026\045\027\014\030\015\031\040\032" +
    "\024\034\041\035\021\036\053\037\023\040\043\041\027" +
    "\042\016\043\010\045\055\046\017\047\034\050\031\001" +
    "\002\000\004\011\uffd6\001\002\000\054\002\uffd8\010\uffd8" +
    "\011\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\001" +
    "\002\000\004\011\uffd5\001\002\000\060\002\ufff5\004\ufff5" +
    "\005\ufff5\007\ufff5\010\ufff5\011\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\001\002\000\052\002\uffc7\010\uffc7\011\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\001\002\000\006\004" +
    "\067\005\142\001\002\000\052\002\uffc6\010\uffc6\011\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\001\002\000\004\005" +
    "\144\001\002\000\052\002\ufff8\010\ufff8\011\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\032\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\001\002\000\014\040\043\041" +
    "\027\042\016\043\010\045\073\001\002\000\004\007\147" +
    "\001\002\000\004\010\037\001\002\000\054\002\uffcf\010" +
    "\uffcf\011\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\151\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\001\002\000\004\010\037\001\002\000\052\002\uffce\010" +
    "\uffce\011\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\045\uffce\046\uffce\047\uffce\050\uffce\001\002" +
    "\000\004\045\154\001\002\000\004\007\155\001\002\000" +
    "\004\005\156\001\002\000\052\002\uffc1\010\uffc1\011\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\001\002\000\014\040" +
    "\043\041\027\042\016\043\010\045\055\001\002\000\004" +
    "\005\161\001\002\000\016\005\163\040\043\041\027\042" +
    "\016\043\010\045\073\001\002\000\004\005\171\001\002" +
    "\000\016\007\164\040\043\041\027\042\016\043\010\045" +
    "\055\001\002\000\004\010\037\001\002\000\006\004\067" +
    "\007\166\001\002\000\004\010\037\001\002\000\052\002" +
    "\uffca\010\uffca\011\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\001\002\000\052\002\uffc9\010\uffc9\011\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\001\002\000\016\007\172\040\043" +
    "\041\027\042\016\043\010\045\055\001\002\000\004\010" +
    "\037\001\002\000\006\004\067\007\174\001\002\000\004" +
    "\010\037\001\002\000\052\002\uffcc\010\uffcc\011\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\001\002\000\052\002\uffcb" +
    "\010\uffcb\011\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\001" +
    "\002\000\052\002\uffc8\010\uffc8\011\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\002\003\001\001\000\056\003\024\004" +
    "\017\005\051\006\032\007\047\010\034\011\004\012\041" +
    "\013\045\014\035\015\012\016\021\017\027\020\010\021" +
    "\005\023\050\024\006\025\011\026\031\027\053\030\043" +
    "\031\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\140\006\032\007" +
    "\047\010\034\011\004\012\041\013\045\014\035\015\012" +
    "\016\021\017\027\020\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\024\004\132\005\051\006\032\007" +
    "\047\010\034\011\004\012\041\013\045\014\035\015\012" +
    "\016\021\017\027\020\010\021\130\022\131\023\050\024" +
    "\006\025\011\027\053\030\043\031\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\056\007\047\010\034\011\004\012" +
    "\041\013\045\014\035\015\012\016\021\017\027\020\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\067\007" +
    "\047\010\034\011\004\012\041\013\045\014\035\015\012" +
    "\016\021\017\027\020\010\001\001\000\002\001\001\000" +
    "\020\007\047\011\004\014\071\015\012\016\021\017\027" +
    "\020\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\047\011\004\015\074\016\021\017\027\020\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\047\011\004\016\077\017\027\020\010\001\001\000\002" +
    "\001\001\000\012\007\047\011\004\017\115\020\010\001" +
    "\001\000\012\007\047\011\004\017\102\020\010\001\001" +
    "\000\002\001\001\000\012\007\047\011\004\017\104\020" +
    "\010\001\001\000\002\001\001\000\010\007\047\011\004" +
    "\020\114\001\001\000\010\007\047\011\004\020\107\001" +
    "\001\000\002\001\001\000\006\007\047\011\113\001\001" +
    "\000\006\007\047\011\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\047\011\004\017\117\020\010\001\001\000\002\001" +
    "\001\000\014\007\047\011\004\016\121\017\027\020\010" +
    "\001\001\000\002\001\001\000\022\007\047\011\004\013" +
    "\123\014\035\015\012\016\021\017\027\020\010\001\001" +
    "\000\002\001\001\000\026\007\047\010\125\011\004\012" +
    "\041\013\045\014\035\015\012\016\021\017\027\020\010" +
    "\001\001\000\002\001\001\000\004\026\127\001\001\000" +
    "\002\001\001\000\056\003\024\004\132\005\051\006\032" +
    "\007\047\010\034\011\004\012\041\013\045\014\035\015" +
    "\012\016\021\017\027\020\010\021\130\022\135\023\050" +
    "\024\006\025\011\027\053\030\043\031\046\001\001\000" +
    "\002\001\001\000\056\003\024\004\132\005\051\006\032" +
    "\007\047\010\034\011\004\012\041\013\045\014\035\015" +
    "\012\016\021\017\027\020\010\021\130\022\133\023\050" +
    "\024\006\025\011\027\053\030\043\031\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\047" +
    "\010\145\011\004\012\041\013\045\014\035\015\012\016" +
    "\021\017\027\020\010\001\001\000\002\001\001\000\004" +
    "\026\147\001\001\000\002\001\001\000\004\026\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\157\007" +
    "\047\010\034\011\004\012\041\013\045\014\035\015\012" +
    "\016\021\017\027\020\010\001\001\000\002\001\001\000" +
    "\026\007\047\010\161\011\004\012\041\013\045\014\035" +
    "\015\012\016\021\017\027\020\010\001\001\000\002\001" +
    "\001\000\032\005\164\006\032\007\047\010\034\011\004" +
    "\012\041\013\045\014\035\015\012\016\021\017\027\020" +
    "\010\001\001\000\004\026\167\001\001\000\002\001\001" +
    "\000\004\026\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\172\006\032\007\047\010\034\011\004" +
    "\012\041\013\045\014\035\015\012\016\021\017\027\020" +
    "\010\001\001\000\004\026\175\001\001\000\002\001\001" +
    "\000\004\026\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(java_cup.runtime.Symbol currToken) {
        System.out.println("Erro de sintaxe na linha: "+(currToken.left+1)+" coluna: " +(currToken.right+1));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


	AnalisadorSemantico analisadorSemantico = new AnalisadorSemantico();
	//Gerador gerador = new Gerador(); 

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= unidade_de_compilacao EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // unidade_de_compilacao ::= unidade_de_compilacao declaracao 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(r!=null){Gerador.gravarArquivo(r.toString());}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // unidade_de_compilacao ::= unidade_de_compilacao instrucao 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(r!=null){Gerador.gravarArquivo(r.toString());}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // unidade_de_compilacao ::= unidade_de_compilacao instrucao_composta 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(r!=null){Gerador.gravarArquivo(r.toString());}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unidade_de_compilacao ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unidade_de_compilacao",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // especificador_tipo ::= INTEGER_KEYWORD 
            {
              Object RESULT =null;
		 RESULT = TipoVariavel.INT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // especificador_tipo ::= FLOAT_KEYWORD 
            {
              Object RESULT =null;
		 RESULT = TipoVariavel.FLOAT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // especificador_tipo ::= CHARACTER_KEYWORD 
            {
              Object RESULT =null;
		 RESULT = TipoVariavel.CHAR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // especificador_tipo ::= BOOLEAN_KEYWORD 
            {
              Object RESULT =null;
		 RESULT = TipoVariavel.BOOL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("especificador_tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracao ::= especificador_tipo IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		     
    RESULT = analisadorSemantico.inserirSimbolo(var, (TipoVariavel)tipo, varleft, varright);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expressao ::= expressao_atribuicao 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expressao ::= expressao COMMA expressao_atribuicao 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e + "," + ea; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressao_atribuicao ::= expressao_condicional SEMICOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expressao_atribuicao ::= IDENTIFIER EQ expressao_atribuicao 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = analisadorSemantico.atribuirVariavel(var,(Expressao)valor, varleft, varright);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_atribuicao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constante ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expressao(c.toString(),TipoVariavel.CHAR,false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constante ::= INTEGER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expressao(c.toString(),TipoVariavel.INT,false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constante ::= FLOAT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expressao(c.toString(),TipoVariavel.FLOAT,false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constante ::= BOOLEAN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expressao(c.toString(),TipoVariavel.BOOL,false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expressao_condicional ::= expressao_or 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_condicional",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressao_or ::= expressao_and 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_or",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressao_or ::= expressao_or OR expressao_and 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
    RESULT = analisadorSemantico.testarExpressao((Expressao)var1, (Expressao)var2, "||", var1left, var1right, var2left, var2right);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_or",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressao_and ::= expressao_xor 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_and",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressao_and ::= expressao_and AND expressao_xor 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
    RESULT = analisadorSemantico.testarExpressao((Expressao)var1, (Expressao)var2, "&&", var1left, var1right, var2left, var2right);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_and",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressao_xor ::= expressao_equalidade 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_xor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressao_xor ::= expressao_xor XOR expressao_equalidade 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
    RESULT = analisadorSemantico.testarExpressao((Expressao)var1, (Expressao)var2, "^", var1left, var1right, var2left, var2right);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_xor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressao_equalidade ::= expressao_relacional 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_equalidade",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressao_equalidade ::= expressao_equalidade EQEQ expressao_relacional 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
        RESULT = analisadorSemantico.testarExpressao((Expressao)var1, (Expressao)var2, "==", var1left, var1right, var2left, var2right);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_equalidade",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expressao_equalidade ::= expressao_equalidade NOT EQ expressao_relacional 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
        RESULT = analisadorSemantico.testarExpressao((Expressao)var1, (Expressao)var2, "!=", var1left, var1right, var2left, var2right);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_equalidade",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expressao_relacional ::= expressao_aditiva 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressao_relacional ::= expressao_relacional LESS_THAN expressao_aditiva 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
    RESULT = analisadorSemantico.testarExpressao((Expressao)var1, (Expressao)var2, "<", var1left, var1right, var2left, var2right);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressao_relacional ::= expressao_relacional GREATER_THAN expressao_aditiva 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
    RESULT = analisadorSemantico.testarExpressao((Expressao)var1, (Expressao)var2, ">", var1left, var1right, var2left, var2right);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressao_relacional ::= expressao_relacional LESS_THAN EQ expressao_aditiva 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
    RESULT = analisadorSemantico.testarExpressao((Expressao)var1, (Expressao)var2, "<=", var1left, var1right, var2left, var2right);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressao_relacional ::= expressao_relacional GREATER_THAN EQ expressao_aditiva 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
    RESULT = analisadorSemantico.testarExpressao((Expressao)var1, (Expressao)var2, ">=", var1left, var1right, var2left, var2right);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressao_aditiva ::= expressao_multiplicativa 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aditiva",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expressao_aditiva ::= expressao_aditiva ADDITION expressao_multiplicativa 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
    RESULT = analisadorSemantico.testarExpressao((Expressao)var1, (Expressao)var2, "+", var1left, var1right, var2left, var2right);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aditiva",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expressao_aditiva ::= expressao_aditiva SUBTRACTION expressao_multiplicativa 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
    RESULT = analisadorSemantico.testarExpressao((Expressao)var1, (Expressao)var2, "-", var1left, var1right, var2left, var2right);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aditiva",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expressao_multiplicativa ::= expressao_primaria 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expressao_multiplicativa ::= expressao_multiplicativa MULTIPLICATION expressao_primaria 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
    RESULT = analisadorSemantico.testarExpressao((Expressao)var1, (Expressao)var2, "*", var1left, var1right, var2left, var2right);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expressao_multiplicativa ::= expressao_multiplicativa DIVISION expressao_primaria 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
    RESULT = analisadorSemantico.testarExpressao((Expressao)var1, (Expressao)var2, "/", var1left, var1right, var2left, var2right);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_multiplicativa",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expressao_primaria ::= IDENTIFIER 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expressao(var.toString(),null,true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_primaria",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expressao_primaria ::= constante 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = var;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_primaria",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instrucao_composta ::= CURLY_BRACKET_OPEN bloco_instrucao CURLY_BRACKET_CLOSE 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = "{" + inst.toString() + "}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_composta",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bloco_instrucao ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bloco_instrucao ::= declaracao bloco_instrucao 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = d.toString() + b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bloco_instrucao ::= instrucao bloco_instrucao 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i.toString() + b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco_instrucao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instrucao ::= expressao 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instrucao ::= instrucao_if 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instrucao ::= instrucao_iterativa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instrucao ::= instrucao_pulo 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instrucao ::= comando 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instrucao_if ::= IF PARENTHESES_OPEN expressao_condicional PARENTHESES_CLOSE instrucao_composta 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "if(" + ((Expressao)exp).resultado + ")" + inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_if",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instrucao_if ::= IF PARENTHESES_OPEN expressao_condicional PARENTHESES_CLOSE instrucao_composta ELSE instrucao_composta 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int inst1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int inst1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object inst1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inst2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "if(" + ((Expressao)exp).resultado + ")" + inst1 + " else " + inst2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_if",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instrucao_iterativa ::= WHILE PARENTHESES_OPEN expressao_condicional PARENTHESES_CLOSE instrucao_composta 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "while(" + ((Expressao)exp).resultado + ")" + inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instrucao_iterativa ::= FOR PARENTHESES_OPEN expressao_atribuicao SEMICOLON expressao_condicional SEMICOLON expressao PARENTHESES_CLOSE instrucao_composta 
            {
              Object RESULT =null;
		int atrileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int atriright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object atri = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "for(" + atri + ";" + cond + ";" + ((Expressao)exp).resultado + ")" + inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instrucao_iterativa ::= FOR PARENTHESES_OPEN expressao_atribuicao SEMICOLON expressao_condicional SEMICOLON PARENTHESES_CLOSE instrucao_composta 
            {
              Object RESULT =null;
		int atrileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int atriright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object atri = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "for(" + atri + ";" + cond + ";" + ")" + inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instrucao_iterativa ::= FOR PARENTHESES_OPEN expressao_atribuicao SEMICOLON SEMICOLON expressao PARENTHESES_CLOSE instrucao_composta 
            {
              Object RESULT =null;
		int atrileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int atriright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object atri = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "for(" + atri + ";" + ";" + ((Expressao)exp).resultado + ")" + inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instrucao_iterativa ::= FOR PARENTHESES_OPEN expressao_atribuicao SEMICOLON SEMICOLON PARENTHESES_CLOSE instrucao_composta 
            {
              Object RESULT =null;
		int atrileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int atriright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object atri = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "for(" + atri + ";" + ";" + ")" + inst;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_iterativa",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instrucao_pulo ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;
		RESULT = "continue;";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_pulo",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instrucao_pulo ::= BREAK SEMICOLON 
            {
              Object RESULT =null;
		RESULT = "break;";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_pulo",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instrucao_pulo ::= RETURN expressao SEMICOLON 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = "return" + exp + ";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucao_pulo",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comando ::= comando_print 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comando ::= comando_scan 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comando_print ::= PRINT PARENTHESES_OPEN IDENTIFIER PARENTHESES_CLOSE SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "printf(\"%" + analisadorSemantico.obterCharDoTipo(analisadorSemantico.obterTipo(id)) + "\"," + id.toString() + ");"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_print",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comando_print ::= PRINT PARENTHESES_OPEN STRING PARENTHESES_CLOSE SEMICOLON 
            {
              Object RESULT =null;
		int strgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int strgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object strg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = "printf(\"" + strg.toString() + "\");"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_print",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comando_scan ::= SCAN PARENTHESES_OPEN IDENTIFIER PARENTHESES_CLOSE SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
    Identificador i = analisadorSemantico.obterIdentificador(id, idleft, idright);
    if(i!=null) i.estaAtribuido = true;
    RESULT = "scanf(\"%" + analisadorSemantico.obterCharDoTipo(analisadorSemantico.obterTipo(id)) + "\",&" + id.toString() + ");"; 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_scan",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
